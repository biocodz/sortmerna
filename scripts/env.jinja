# @copyright 2016-2021  Clarity Genomics BVBA
# @copyright 2012-2016  Bonsai Bioinformatics Research Group
# @copyright 2014-2016  Knight Lab, Department of Pediatrics, UCSD, La Jolla
#
# SortMeRNA - next-generation reads filter for metatranscriptomic or total RNA
# This is a free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SortMeRNA is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with SortMeRNA. If not, see <http://www.gnu.org/licenses/>.
#
# contributors: Jenya Kopylova   jenya.kopylov@gmail.com
#			          Laurent Noé      laurent.noe@lifl.fr
#			          Pierre Pericard  pierre.pericard@lifl.fr
#			          Daniel McDonald  wasade@gmail.com
#			          Mikaël Salson    mikael.salson@lifl.fr
#			          Hélène Touzet    helene.touzet@lifl.fr
#			          Rob Knight       robknight@ucsd.edu

#
# file: env.jinja
# created: Oct 28, 2019 Mon
#
# sample configuration
#
{%- set CMAKE_VER            = '3.20.1' %}  # pre: 3.16.8 20210423
{%- set GIT_VER_MAJ          = '2.24.0' %}
{%- set GIT_VER_MIN          = '2.24.0.2' %}
{%- set ROCKSDB_VER          = 'v7.1.1' %} # Optional. Default: Git master head  current (20210423): v6.8.1 6.4.6
{%- set ENV                  = ENV or 'WIN' %} # name of environment: WIN | WSL | LNX_AWS | LNX_TRAVIS
{%- set BIN_USER_WIN         = UHOME~'/a01_apps' %}
{%- set CODE_USER_WIN        = UHOME~'/a01_code' %}
{%- set ZLIB_LINK_WIN_REL_T1 = 'zlibstatic.lib' %}
{%- set ZLIB_LINK_WIN_DBG_T1 = 'zlibstaticd.lib' %}
{%- set LIB_DIR_WIN          = UHOME~'/a01_libs' %}
# WINHOME - set using command line option 'winhome' and passed here for Jinja parser to process

env.list:
  - WIN
  - WSL
  - LIN # generic Linux
  - LIN_Ubuntu_2204
  - LNX_VBox_Ubuntu_1604
  - LNX_VBox_Ubuntu_1804
  - LNX_VBox_Centos_77
  - LNX_AWS

pkg.list: # packages that can be built/installed using this 'env.jinja' configuration
  - sortmerna
  - zlib
  - rocksdb
  - rapidjson
  - conda
  - all

env.config:
  - env: # list of environments using a particular setup
      - LIN
      - LIN_Ubuntu_2204
    packages: # list of packages required
      - git
      - conda
      - gcc
      - cmake
      - make
      - binutils
      #- ninja-build
    conda.packages: # list of conda packages required
      - pyyaml
      - jinja2
      - requests
      - scikit-bio

#
# optional variables
#
env: {{ENV}}
DATA_DIR:
  WIN: {{ UHOME }}/a01_data
  WSL: {{ WINHOME }}/a01_data
  LNX_VBox_Ubuntu_1604: /media/sf_a01_data
  LNX_VBox_Ubuntu_1804: /media/sf_a01_data
  LNX_VBox_Centos_77: /media/sf_a01_data
  LNX_AWS: /var/a01_data
  LIN: {{UHOME}}/a1/data
  LIN_Ubuntu_2204: {{UHOME}}/a1/data
LIB_DIR:
  WIN: {{ UHOME }}/a01_libs # Optional. 3rd party libraries location. Default: SMR_SRC/3rdparty/
  WSL: {{ WINHOME }}/a01_libs
  LNX_AWS: /opts # optional. Default: $HOME
  LNX_VBox_Ubuntu_1604: /media/sf_a01_libs
  LNX_VBox_Ubuntu_1804: /media/sf_a01_libs
  LNX_VBox_Centos_77: /media/sf_a01_libs
  LIN: {{UHOME}}/a1/code
WRK_DIR:
  WIN: {{ UHOME }}/a01_data/sortmerna/run
  WSL:
  LNX_VBox_Ubuntu_1804:
  LNX_AWS: /var/sortmerna/run
  LIN: {{UHOME}}/a1/data/sortmerna/run

#
# ==== Libraries ====
#
sortmerna:
  url: https://github.com/biocore/sortmerna.git
  ver:
  src:   
    WIN: {{ CODE_USER_WIN }}/sortmerna # Default: $HOME/sortmerna
    WSL: {{WINHOME}}/a01_code/sortmerna
    LNX_AWS: /opts/sortmerna
    LNX_TRAVIS: /home/travis/build/biocore/sortmerna
    LNX_VBox_Ubuntu_1604: /media/sf_a01_code/sortmerna
    LNX_VBox_Ubuntu_1804: /media/sf_a01_code/sortmerna
    LNX_VBox_Centos_77: /media/sf_a01_code/sortmerna
    LIN_Ubuntu_2204: {{UHOME}}/a1/code/sortmerna
    LIN: {{UHOME}}/a1/code/sortmerna
  build: 
    WIN: # Default: SMR_SRC/build
    WSL: {{UHOME}}/sortmerna/build
    LNX_AWS: /opts/sortmerna/build
    LNX_VBox_Ubuntu_1604: {{UHOME}}/sortmerna/build
    LNX_VBox_Ubuntu_1804: {{UHOME}}/sortmerna/build
    LNX_VBox_Centos_77: {{UHOME}}/sortmerna/build
    LIN: {{UHOME}}/a1/code/sortmerna/build
    LIN_Ubuntu_2204: {{UHOME}}/a1/code/sortmerna/build
  dist: 
    WIN: # Default: SMR_SRC/dist
    WSL: {{UHOME}}/sortmerna/dist
    LNX_AWS: /opts/sortmerna/dist
    LNX_VBox_Ubuntu_1604: {{UHOME}}/sortmerna/dist
    LNX_VBox_Ubuntu_1804: {{UHOME}}/sortmerna/dist
    LNX_VBox_Centos_77: {{UHOME}}/sortmerna/dist
    LIN: {{UHOME}}/a1/code/sortmerna/dist
    LIN_Ubuntu_2204: {{UHOME}}/a1/code/sortmerna/dist
  bin:
    LNX_AWS: /opts/sortmerna/bin
  # build related info
  build_type: release
  link: 
    WIN:
      t1:
        name: RocksDB-static + Zlib-static + Runtime-dynamic-multithreaded
        zlib: t1 # zlib library linkage type
        rocksdb: t3 # rocksdb library linkage type
    LNX:
      t1:
        name: RocksDB-static + Zlib-static + Runtime-static
        zlib: t1 # zlib library linkage type
        rocksdb: t3 # rocksdb library linkage type
    LIN:
      t1:
        name: RocksDB-static + Zlib-static + Runtime-static
        zlib: t1 # zlib library linkage type
        rocksdb: t3 # rocksdb library linkage type

dirent:
  url: https://github.com/tronkko/dirent
  src:
    WIN: {{ LIB_DIR_WIN }}/dirent
  build:
  dist:

zlib:
  url: https://github.com/madler/zlib.git
  src:
    WIN: {{ LIB_DIR_WIN }}/zlib # LIB_DIR/zlib
    WSL: {{ WINHOME }}/a01_libs/zlib #
    LNX_AWS: /opts/zlib
    LNX_TRAVIS: #
    LNX_VBox_Ubuntu_1604: /media/sf_a01_libs/zlib
    LNX_VBox_Ubuntu_1804: /media/sf_a01_libs/zlib
    LNX_VBox_Centos_77: /media/sf_a01_libs/zlib
    LIN: {{UHOME}}/a1/code/zlib
  build:
    LNX_AWS: /opts/zlib/build # optional. Default: $HOME/zlib/build
    LNX_VBox_Ubuntu_1604: {{UHOME}}/zlib/build
    LNX_VBox_Ubuntu_1804: {{UHOME}}/zlib/build
    LNX_VBox_Centos_77: {{UHOME}}/zlib/build
    LIN: {{UHOME}}/a1/code/zlib/build
  dist:
    WSL: {{UHOME}}/zlib/dist
    LNX_AWS: /opts/zlib/dist # optional. Default: $HOME/zlib/dist
    LNX_VBox_Ubuntu_1604: {{UHOME}}/zlib/dist
    LNX_VBox_Ubuntu_1804: {{UHOME}}/zlib/dist
    LNX_VBox_Centos_77: {{UHOME}}/zlib/dist
    LIN: {{UHOME}}/a1/code/zlib/dist
  # build related info
  build_type: release
  link:
    WIN:
      t1:
        type:    MD/MDd # multi-threaded DLL runtime lib (default)
        dir:     t1 # added to the distribution location path i.e. $ZLIB_SRC/dist/t1/
        release: {{ ZLIB_LINK_WIN_REL_T1 }}
        debug:   {{ ZLIB_LINK_WIN_DBG_T1 }}
      t2:
        type:    MT/MTd # mutli-threaded Static runtime lib. Needs either CMakeLists modification, or command line options.
        dir:     t2

rocksdb:
  info: build from GitHub sources
  url: https://github.com/facebook/rocksdb.git
  ver: {{ ROCKSDB_VER }}
  src:   # Default: LIB_DIR/rocksdb
    WIN: {{ LIB_DIR_WIN }}/rocksdb
    LNX_AWS: /opts/rocksdb # optional. Default: $HOME/rocksdb
    LNX_VBox_Ubuntu_1604: /media/sf_a01_libs/rocksdb
    LNX_VBox_Ubuntu_1804: /media/sf_a01_libs/rocksdb
    LNX_VBox_Centos_77: /media/sf_a01_libs/rocksdb
    LIN: {{UHOME}}/a1/code/rocksdb
  build:
    LNX_AWS: /opts/build # optional. Default: $HOME/rocksdb/build
    LNX_VBox_Ubuntu_1604: /home/biocodz/rocksdb/build
    LNX_VBox_Ubuntu_1804: /home/biocodz/rocksdb/build
    LNX_VBox_Centos_77: /home/biocodz/rocksdb/build
    LIN: {{UHOME}}/a1/code/rocksdb/build
  dist:
    WSL: {{UHOME}}/rocksdb/dist
    LNX_AWS: /opts/dist # optional. Default: $HOME/rocksdb/dist
    LNX_VBox_Ubuntu_1604: {{UHOME}}/rocksdb/dist
    LNX_VBox_Ubuntu_1804: {{UHOME}}/rocksdb/dist
    LNX_VBox_Centos_77: {{UHOME}}/rocksdb/dist
    LIN: {{UHOME}}/a1/code/rocksdb/dist
  # build related info
  build_type: release
  # linkage types
  link:
    WIN:
      t1:
        # cmake flags
        WITH_MD_LIBRARY: 1
        WITH_XPRESS: 1
        WITH_ZLIB: 1
      t2:
        WITH_MD_LIBRARY: 1
        WITH_XPRESS: 1
        WITH_ZLIB: 1
      t3:  # default
        name: RocksDB/static + ZLib/static + Runtime/dynamic/multithreaded
        WITH_MD_LIBRARY: 1
        WITH_XPRESS: 1
        WITH_ZLIB: 1
        ZLIB_LIB_DEBUG:   {{ ZLIB_LINK_WIN_DBG_T1 }} #zlibstaticd.lib
        ZLIB_LIB_RELEASE: {{ ZLIB_LINK_WIN_REL_T1 }} #zlibstatic.lib
        PORTABLE: 0
        OPTDBG: 0
        WITH_RUNTIME_DEBUG: 0
        WITH_TESTS: 0
        WITH_TOOLS: 0
    LNX:

rapidjson:
  url: https://github.com/Tencent/rapidjson
  src:
    WIN: {{ LIB_DIR_WIN }}/rapidjson
    LNX_AWS: /opts/rapidjson # optional. Default: $HOME/rapidjson
    LNX_VBox_Ubuntu_1604: /media/sf_a01_libs/rapidjson
    LNX_VBox_Ubuntu_1804: /media/sf_a01_libs/rapidjson  # Default: LIB_DIR/rapidjson
    LNX_VBox_Centos_77: /media/sf_a01_libs/rapidjson
    LIN: {{UHOME}}/a1/code/rapidjson
  build:
    LNX_AWS: /opts/rapidjson/build # optional. Default: $HOME/rapidjson/build
    LNX_VBox_Ubuntu_1604: /home/biocodz/rapidjson/build
    LNX_VBox_Ubuntu_1804: /home/biocodz/rapidjson/build
    LNX_VBox_Centos_77: /home/biocodz/rapidjson/build
    LIN: {{UHOME}}/a1/code/rapidjson/build
  dist:
    WSL: {{UHOME}}/rapidjson/dist
    LNX_AWS: /opts/rapidjson/dist # optional. Default: $HOME/rapidjson/dist
    LNX_VBox_Ubuntu_1604: /home/biocodz/rapidjson/dist
    LNX_VBox_Ubuntu_1804: /home/biocodz/rapidjson/dist
    LNX_VBox_Centos_77: /home/biocodz/rapidjson/dist
    LIN: {{UHOME}}/a1/code/rapidjson/dist

concurrentqueue:
  url: https://github.com/cameron314/concurrentqueue
  src:
    WIN: {{ LIB_DIR_WIN }}/concurrentqueue
    #LNX: UHOME/concurrentqueu/  # default
    LNX_AWS: /opts/concurrentqueue
    LNX_VBox_Ubuntu_1604: /media/sf_a01_libs/concurrentqueue
    LNX_VBox_Ubuntu_1804: /media/sf_a01_libs/concurrentqueue
    LNX_VBox_Centos_77: /media/sf_a01_libs/concurrentqueue
    LIN: {{UHOME}}/a1/code/concurrentqueue
#
# ==== Tools ====
#
cmake:
  ver: {{CMAKE_VER}}
  url:
    WIN: https://github.com/Kitware/CMake/releases/download/v{{CMAKE_VER}}/cmake-{{CMAKE_VER}}-win64-x64.zip
    LNX: https://github.com/Kitware/CMake/releases/download/v{{CMAKE_VER}}/cmake-{{CMAKE_VER}}-Linux-x86_64.tar.gz
  root:
    WIN: # default: User home
    WSL:
    LNX_AWS: /opts # default: User home
    LNX_TRAVIS: # default $HOME
  generator:
    WIN: Visual Studio 17 2022 # Visual Studio 16 2019 | Ninja
    WSL: Unix Makefiles
    LNX: Unix Makefiles
    LIN: Unix Makefiles
  home:
    WIN: {{ BIN_USER_WIN }}/cmake-{{CMAKE_VER}}-win64-x64
    LNX_AWS: /opts/cmake-{{CMAKE_VER}}-Linux-x86_64
    LNX_VBox_Ubuntu_1604: {{UHOME}}/cmake-{{CMAKE_VER}}-Linux-x86_64
    LNX_VBox_Ubuntu_1804: {{UHOME}}/cmake-{{CMAKE_VER}}-Linux-x86_64
    LNX_VBox_Centos_77: {{UHOME}}/cmake-{{CMAKE_VER}}-Linux-x86_64

conda:
  url: 
    WIN:
    LNX: 'http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh'
  root:
    WIN:
    LNX_TRAVIS: # default HOME

git:
  url:
    WIN: https://github.com/git-for-windows/git/releases/download/v{{ GIT_VER_MAJ }}.windows.2/PortableGit-{{ GIT_VER_MIN }}-64-bit.7z.exe
  root: # default: User home
  home:
    WIN: {{ BIN_USER_WIN }}/PortableGit-{{ GIT_VER_MIN }}-64


OSX:
  SMR_SRC:
  DATA_DIR:
  # Optional ->
  build:
  dist:
  LIB_DIR:
  DIRENT_SRC:
  ZLIB_SRC:
  ROCKSDB_SRC:
  RAPID_SRC: